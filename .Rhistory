data(iris)
hist(iris)
str(iris)
sw<-iris$Sepal.Width
hist(sw)
par(mfrow=c(1,2))
breakpoints <- seq(from=min(iris$Sepal.Width), to=max(iris$Sepal.Width), length.out=11)
hist(iris$Sepal.Width, breaks=breakpoints, col="#0000FF33")
breakpoints <- seq(from=min(iris$Sepal.Width), to=max(iris$Sepal.Width), length.out=21)
hist(iris$Sepal.Width, breaks=breakpoints, col="#FF000033")
par(mfrow=c(1,1))
setwd("F:/work/RWorkSpace/DSTbox/09")
install.packages("shiny")
runApp()
getwd()
runApp("09")
))
)
))
library(manipulate)
R.Version()
getwd()
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(swirl)
install.packages("swirl")
swirl()
library(swirl)
swirl()
library(rCharts)
library(airquality)
data(airquality)
runApp()
library(shiny)
runApp()
runApp()
library(UsingR)
data(galton)
runApp()
runApp()
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
d
airquality
dTable(airquality, sPaginationType = "full_numbers")
install.packages("phonTools")
library(phontools)
library(phonTools)
data(soubd)
data(sound)
print(sound)
runApp()
library(shiny)
runApp()
runApp(./1)
runApp(path="./1")
runApp(appDir="./1")
runApp(appDir="./1")
shiny::runApp('1')
shiny::runApp('2')
shiny::runApp('2')
shiny::runApp('2')
shiny::runApp('2')
runApp(appDir="./2", "cencusVis", display.mode="showcase")
runApp(appDir="./2", "censusVis", display.mode="showcase")
runApp(appDir="./2",display.mode="showcase")
runApp(appDir="./2",display.mode="showcase")
shiny::runApp('2')
shiny::runApp('2')
getwd()
setwd("F:/work/RWorkSpace/coursera/DSTbox/09/3")
getwd
getwd()
counties <-readRDS("data/counties.rds")
install.packages(c("maps,""mapproj"))
install.packages(c("maps","mapproj"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("F:/work/RWorkSpace/coursera/DSTbox/09/stockVis")
runApp("stockVis")
runApp("stockVis")
setwd("F:/work/RWorkSpace/coursera/DSTbox/09")
runApp("stockVis")
getwd()
runApp(nike)
library(shiny)
runApp("./nike")
runApp("./iris")
mtcars
str(mtcars)
qplot(data = mtcars, x=disp, y=hwy, color=class)
mpg
qplot(data = mpg, x=displ, y=hwy, color=manufacturer)
str(mpg)
qplot(data = mpg, x=displ, y=hwy, color=class)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer, facets = ~class)
myplot <- ggplot(mpg, aes(x=displ, y=hwy))
myplot + geom_point(aes(color=manufacturer)) + stat_smooth(method=lm, se =FALSE)
runApp
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install_github("rga", "skardhamar")
library(devtools)
install_github("rga", "skardhamar")
library(rga)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
ga$getProfiles()
ga$getProfiles()
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
library(rga)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
library(rga)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
runApp()
library(shiny)
library(shiny)
runApp()
library(datasets)
library(ggplot2)
runApp()
runApp()
names(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars
shiny::runApp()
shiny::runApp()
data(mtcars)
data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(iris)
runApp("iris")
library(reshape)
install.packages("reshape")
runApp("iris")
runApp("iris")
runApp("iris")
str(mtcars)
summary(mtcars)
shiny::runApp()
library(slidify)
setwd("F:/work/RWorkSpace/coursera/DSTbox/09/project")
author("petchon")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
names(mtcar)
names(mtcars)
shiny::runApp('F:/work/RWorkSpace/coursera/DSTbox/09')
shiny::runApp('F:/work/RWorkSpace/coursera/DSTbox/09')
